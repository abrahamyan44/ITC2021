{"ast":null,"code":"export const allButtons = dark => {\n  const darkProp = dark ? ' dark' : '';\n  return `<Button${darkProp}>default</Button>\n<Button${darkProp} color='var(--primary)'>colored</Button>\n<Button${darkProp} color='#ccc' bgColor='var(--primary)'>colored</Button>\n<Button${darkProp} disabled>disabled</Button>\n<Button${darkProp} rounded>rounded</Button>\n<Button${darkProp} depressed>depressed</Button>\n<Button${darkProp} outlined>outlined</Button>\n<Button${darkProp} text>text</Button>`;\n};\nexport const docButtons = (dark, type) => {\n  const darkProp = dark ? ' dark' : '';\n  const typeProp = type ? ' ' + type : '';\n  return `<Button${darkProp}${typeProp}>default</Button>\n<Button${darkProp}${typeProp} color='var(--primary)'>colored</Button>\n<Button${darkProp}${typeProp} disabled>disabled</Button>`;\n};\nexport const blockButton = dark => {\n  const darkProp = dark ? ' dark' : '';\n  return `<Button${darkProp} block>block button</Button>`;\n};\nexport const sizeButtons = (dark, type) => {\n  const darkProp = dark ? ' dark' : '';\n  return `<Button${darkProp} size='small'>small</Button>\n<Button${darkProp} size='medium'>medium</Button>\n<Button${darkProp} size='large'>large</Button>`;\n};\nexport const fabButtons = (dark, type) => {\n  const darkProp = dark ? ' dark' : '';\n\n  switch (type) {\n    case 'main':\n      return `<Fab${darkProp}>\n  <span style={{ fontSize: '30px', margin: '2px 0px 0px 2px' }}>&#43;</span>\n</Fab>\n<Fab${darkProp} color='var(--primary)'>\n  <span style={{ fontSize: '24px' }}>&#9733;</span>\n</Fab>\n<Fab${darkProp} color='#299ae6'>\n  &nbsp;<span style={{ fontSize: '24px' }}>&#9729;</span>&nbsp;Extended&nbsp;\n</Fab>\n<Fab${darkProp} disabled>\n  <span style={{ fontSize: '24px' }}>&#9762;</span>\n</Fab>`;\n\n    case 'size':\n      return `<Fab${darkProp} size='small'>S</Fab>\n<Fab${darkProp} size='medium'>M</Fab>\n<Fab${darkProp} size='large'>L</Fab>`;\n\n    default:\n      return '';\n  }\n};\nexport const fabPosButtons = dark => {\n  const darkProp = dark ? ' dark' : '';\n  return `<Card${darkProp} flat style={{ position: 'relative'}}>\n  <Fab${darkProp} absolute top left>A</Fab>\n  <Fab${darkProp} absolute top right>B</Fab>\n  <Fab${darkProp} absolute bottom left>C</Fab>\n  <Fab${darkProp} absolute bottom right>D</Fab>\n</Card>`;\n};\nexport const iconButtons = dark => {\n  const darkProp = dark ? ' dark' : '';\n  return `// Icon component is from '@mdi/react' and is not bundled with this library\n<IconButton${darkProp} size='small'>\n  <Icon path={mdiRun} size={0.8} />\n</IconButton>\n<IconButton${darkProp} rounded text={false} color='var(--error)'>\n  <Icon path={mdiOpacity} size={1} />\n</IconButton>\n<IconButton${darkProp} disabled>\n  <Icon path={mdiTrashCanOutline} size={1} />\n</IconButton>\n<IconButton${darkProp} text={false} size='large' color='var(--warning)'>\n  <Icon path={mdiStar} size={1} />\n</IconButton>\n<IconButton${darkProp} color='var(--primary)' rounded>\n  <Icon path={mdiSpeaker} size={1} />\n</IconButton>\n<IconButton${darkProp} color='var(--success)' outlined>\n  <Icon path={mdiBroom} size={1} />\n</IconButton>`;\n};\nexport const toggleButtons = (dark, type, prop) => {\n  const darkProp = dark ? ' dark' : '';\n  const propType = prop ? ' ' + prop : '';\n  return `// Icon component is from '@mdi/react' and is not bundled with this library\n<ToggleButtonGroup${darkProp}${propType} ${type} color='var(--primary)' onChange={this.${type}GroupChange.bind(this)}>\n  <ToggleButton value='1'>\n    <Icon path={${type === 'mandatory' ? 'mdiFormatAlignLeft' : 'mdiFormatBold'}} size={0.9} />\n  </ToggleButton>\n  <ToggleButton value='2'>\n    <Icon path={${type === 'mandatory' ? 'mdiFormatAlignCenter' : 'mdiFormatItalic'}} size={0.9} />\n  </ToggleButton>\n  <ToggleButton value='3'>\n    <Icon path={${type === 'mandatory' ? 'mdiFormatAlignRight' : 'mdiFormatUnderline'}} size={0.9} />\n  </ToggleButton>${type === 'mandatory' ? `\n  <ToggleButton disabled value='4'>\n    <Icon path={mdiFormatAlignJustify} size={0.9} />\n  </ToggleButton>` : ''}\n</ToggleButtonGroup>`;\n};\nexport const toggleSizes = dark => {\n  return `${['small', 'medium', 'large'].map(s => toggleButtons(dark, 'multiple', `value={active} size='${s}'`)).join('\\n')}`;\n};\nexport const toggleStandalone = dark => {\n  const darkProp = dark ? '\\n  dark' : '';\n  return `// Icon component is from '@mdi/react' and is not bundled with this library\n<ToggleButton${darkProp}\n  value={1}\n  color='var(--primary)'\n  selected={standaloneActive === 1}\n  onChange={(e) => this.handleStandaloneChange(e)}\n>\n  <Icon path={mdiFormatBold} size={0.9} />\n</ToggleButton>\n<ToggleButton${darkProp}\n  value={2}\n  color='var(--primary)'\n  selected={standaloneActive === 2}\n  onChange={(e) => this.handleStandaloneChange(e)}\n>\n  <Icon path={mdiFormatItalic} size={0.9} />\n</ToggleButton>\n<ToggleButton${darkProp}\n  value={3}\n  color='var(--primary)'\n  selected={standaloneActive === 3}\n  onChange={(e) => this.handleStandaloneChange(e)}\n>\n  <Icon path={mdiFormatUnderline} size={0.9} />\n</ToggleButton>`;\n};","map":{"version":3,"sources":["/home/yeva/Desktop/New Folder/health-app/src/docs/code/button-code.js"],"names":["allButtons","dark","darkProp","docButtons","type","typeProp","blockButton","sizeButtons","fabButtons","fabPosButtons","iconButtons","toggleButtons","prop","propType","toggleSizes","map","s","join","toggleStandalone"],"mappings":"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","sourcesContent":["export const allButtons = (dark) => {\n  const darkProp = dark ? ' dark' : ''\n  return `<Button${darkProp}>default</Button>\n<Button${darkProp} color='var(--primary)'>colored</Button>\n<Button${darkProp} color='#ccc' bgColor='var(--primary)'>colored</Button>\n<Button${darkProp} disabled>disabled</Button>\n<Button${darkProp} rounded>rounded</Button>\n<Button${darkProp} depressed>depressed</Button>\n<Button${darkProp} outlined>outlined</Button>\n<Button${darkProp} text>text</Button>`\n}\n\nexport const docButtons = (dark, type) => {\n  const darkProp = dark ? ' dark' : ''\n  const typeProp = type ? ' ' + type : ''\n  return `<Button${darkProp}${typeProp}>default</Button>\n<Button${darkProp}${typeProp} color='var(--primary)'>colored</Button>\n<Button${darkProp}${typeProp} disabled>disabled</Button>`\n}\n\nexport const blockButton = (dark) => {\n  const darkProp = dark ? ' dark' : ''\n  return `<Button${darkProp} block>block button</Button>`\n}\n\nexport const sizeButtons = (dark, type) => {\n  const darkProp = dark ? ' dark' : ''\n  return `<Button${darkProp} size='small'>small</Button>\n<Button${darkProp} size='medium'>medium</Button>\n<Button${darkProp} size='large'>large</Button>`\n}\n\nexport const fabButtons = (dark, type) => {\n  const darkProp = dark ? ' dark' : ''\n  switch (type) {\n    case 'main':\n      return `<Fab${darkProp}>\n  <span style={{ fontSize: '30px', margin: '2px 0px 0px 2px' }}>&#43;</span>\n</Fab>\n<Fab${darkProp} color='var(--primary)'>\n  <span style={{ fontSize: '24px' }}>&#9733;</span>\n</Fab>\n<Fab${darkProp} color='#299ae6'>\n  &nbsp;<span style={{ fontSize: '24px' }}>&#9729;</span>&nbsp;Extended&nbsp;\n</Fab>\n<Fab${darkProp} disabled>\n  <span style={{ fontSize: '24px' }}>&#9762;</span>\n</Fab>`\n    case 'size':\n      return `<Fab${darkProp} size='small'>S</Fab>\n<Fab${darkProp} size='medium'>M</Fab>\n<Fab${darkProp} size='large'>L</Fab>`\n    default:\n      return ''\n  }\n}\n\nexport const fabPosButtons = (dark) => {\n  const darkProp = dark ? ' dark' : ''\n  return `<Card${darkProp} flat style={{ position: 'relative'}}>\n  <Fab${darkProp} absolute top left>A</Fab>\n  <Fab${darkProp} absolute top right>B</Fab>\n  <Fab${darkProp} absolute bottom left>C</Fab>\n  <Fab${darkProp} absolute bottom right>D</Fab>\n</Card>`\n}\n\nexport const iconButtons = (dark) => {\n  const darkProp = dark ? ' dark' : ''\n  return `// Icon component is from '@mdi/react' and is not bundled with this library\n<IconButton${darkProp} size='small'>\n  <Icon path={mdiRun} size={0.8} />\n</IconButton>\n<IconButton${darkProp} rounded text={false} color='var(--error)'>\n  <Icon path={mdiOpacity} size={1} />\n</IconButton>\n<IconButton${darkProp} disabled>\n  <Icon path={mdiTrashCanOutline} size={1} />\n</IconButton>\n<IconButton${darkProp} text={false} size='large' color='var(--warning)'>\n  <Icon path={mdiStar} size={1} />\n</IconButton>\n<IconButton${darkProp} color='var(--primary)' rounded>\n  <Icon path={mdiSpeaker} size={1} />\n</IconButton>\n<IconButton${darkProp} color='var(--success)' outlined>\n  <Icon path={mdiBroom} size={1} />\n</IconButton>`\n}\n\nexport const toggleButtons = (dark, type, prop) => {\n  const darkProp = dark ? ' dark' : ''\n  const propType = prop ? ' ' + prop : ''\n  return `// Icon component is from '@mdi/react' and is not bundled with this library\n<ToggleButtonGroup${darkProp}${propType} ${type} color='var(--primary)' onChange={this.${type}GroupChange.bind(this)}>\n  <ToggleButton value='1'>\n    <Icon path={${\n      type === 'mandatory' ? 'mdiFormatAlignLeft' : 'mdiFormatBold'\n    }} size={0.9} />\n  </ToggleButton>\n  <ToggleButton value='2'>\n    <Icon path={${\n      type === 'mandatory' ? 'mdiFormatAlignCenter' : 'mdiFormatItalic'\n    }} size={0.9} />\n  </ToggleButton>\n  <ToggleButton value='3'>\n    <Icon path={${\n      type === 'mandatory' ? 'mdiFormatAlignRight' : 'mdiFormatUnderline'\n    }} size={0.9} />\n  </ToggleButton>${\n    type === 'mandatory'\n      ? `\n  <ToggleButton disabled value='4'>\n    <Icon path={mdiFormatAlignJustify} size={0.9} />\n  </ToggleButton>`\n      : ''\n  }\n</ToggleButtonGroup>`\n}\n\nexport const toggleSizes = (dark) => {\n  return `${['small', 'medium', 'large']\n    .map((s) => toggleButtons(dark, 'multiple', `value={active} size='${s}'`))\n    .join('\\n')}`\n}\n\nexport const toggleStandalone = (dark) => {\n  const darkProp = dark ? '\\n  dark' : ''\n  return `// Icon component is from '@mdi/react' and is not bundled with this library\n<ToggleButton${darkProp}\n  value={1}\n  color='var(--primary)'\n  selected={standaloneActive === 1}\n  onChange={(e) => this.handleStandaloneChange(e)}\n>\n  <Icon path={mdiFormatBold} size={0.9} />\n</ToggleButton>\n<ToggleButton${darkProp}\n  value={2}\n  color='var(--primary)'\n  selected={standaloneActive === 2}\n  onChange={(e) => this.handleStandaloneChange(e)}\n>\n  <Icon path={mdiFormatItalic} size={0.9} />\n</ToggleButton>\n<ToggleButton${darkProp}\n  value={3}\n  color='var(--primary)'\n  selected={standaloneActive === 3}\n  onChange={(e) => this.handleStandaloneChange(e)}\n>\n  <Icon path={mdiFormatUnderline} size={0.9} />\n</ToggleButton>`\n}\n"]},"metadata":{},"sourceType":"module"}